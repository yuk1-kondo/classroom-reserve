// ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØÁî®„Ç´„Çπ„Çø„É†„Éï„ÉÉ„ÇØ
import { useState, useCallback } from 'react';
import { reservationsService, periodTimeMap } from '../firebase/firestore';

export interface ConflictCheckState {
  hasConflict: boolean;
  conflictMessage: string;
  conflictDetails: string[];
}

export const useConflictDetection = () => {
  const [conflictCheck, setConflictCheck] = useState<ConflictCheckState>({
    hasConflict: false,
    conflictMessage: '',
    conflictDetails: []
  });

  // ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØÈñ¢Êï∞
  const checkForConflicts = async (
    targetDates: string[], 
    targetPeriods: string[], 
    targetRoomId: string
  ): Promise<{ hasConflict: boolean; message: string; details: string[] }> => {
    console.log('üîç checkForConflictsÂëº„Å≥Âá∫„Åó:', { targetDates, targetPeriods, targetRoomId });
    
    if (!targetRoomId || targetDates.length === 0 || targetPeriods.length === 0) {
      console.log('üîç „ÉÅ„Çß„ÉÉ„ÇØÊù°‰ª∂‰∏çË∂≥„ÅßÁµÇ‰∫Ü');
      return { hasConflict: false, message: '', details: [] };
    }

    try {
      const conflicts: string[] = [];
      
      for (const date of targetDates) {
        console.log(`üîç ${date}„ÅÆÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØÈñãÂßã`);
        
        // „Åù„ÅÆÊó•„ÅÆ‰∫àÁ¥Ñ„ÇíÂèñÂæó
        const startOfDay = new Date(date);
        startOfDay.setHours(0, 0, 0, 0); // 00:00:00„Åã„ÇâÈñãÂßã
        const endOfDay = new Date(date);
        endOfDay.setHours(23, 59, 59, 999);
        
        console.log(`üîç Ê§úÁ¥¢ÁØÑÂõ≤: ${startOfDay.toISOString()} - ${endOfDay.toISOString()}`);
        
        const existingReservations = await reservationsService.getReservations(startOfDay, endOfDay);
        const roomReservations = existingReservations.filter(r => r.roomId === targetRoomId);
        
        console.log(`üîç ${date}„ÅÆÂÖ®‰∫àÁ¥Ñ:`, existingReservations.length, '‰ª∂');
        console.log(`üîç ${date}„ÅÆÂØæË±°ÊïôÂÆ§‰∫àÁ¥Ñ:`, roomReservations.length, '‰ª∂');
        roomReservations.forEach(r => console.log(`  - ${r.periodName} (period: "${r.period}"): ${r.title} [ID: ${r.id}]`));
        
        for (const period of targetPeriods) {
          console.log(`üîç ÊôÇÈôê${period}„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠...`);
          
          // Êó¢Â≠ò‰∫àÁ¥Ñ„Å®„ÅÆÈáçË§á„Çí„ÉÅ„Çß„ÉÉ„ÇØ
          const isConflict = roomReservations.some(reservation => {
            console.log(`  üìã Êó¢Â≠ò‰∫àÁ¥Ñ„ÉÅ„Çß„ÉÉ„ÇØ: "${reservation.period}" vs "${period}"`);
            
            // Êó¢Â≠ò‰∫àÁ¥Ñ„ÅåÂçò‰∏ÄÊôÇÈôê„ÅÆÂ†¥Âêà
            if (!reservation.period.includes(',')) {
              const conflict = reservation.period === period;
              console.log(`    üî∏ Âçò‰∏ÄÊôÇÈôêÊØîËºÉ: "${reservation.period}" === "${period}" = ${conflict}`);
              if (conflict) console.log(`    ‚ùå Âçò‰∏ÄÊôÇÈôêÈáçË§áÊ§úÂá∫!`);
              return conflict;
            }
            
            // Êó¢Â≠ò‰∫àÁ¥Ñ„ÅåË§áÊï∞ÊôÇÈôê„ÅÆÂ†¥ÂêàÔºà„Ç´„É≥„ÉûÂå∫Âàá„ÇäÔºâ
            const reservedPeriods = reservation.period.split(',').map(p => p.trim());
            const conflict = reservedPeriods.includes(period);
            console.log(`    üî∏ Ë§áÊï∞ÊôÇÈôêÊØîËºÉ: [${reservedPeriods.join(',')}].includes("${period}") = ${conflict}`);
            if (conflict) console.log(`    ‚ùå Ë§áÊï∞ÊôÇÈôêÈáçË§áÊ§úÂá∫!`);
            return conflict;
          });
          
          if (isConflict) {
            const conflictingReservation = roomReservations.find(r => {
              if (!r.period.includes(',')) {
                return r.period === period;
              } else {
                const reservedPeriods = r.period.split(',').map(p => p.trim());
                return reservedPeriods.includes(period);
              }
            });
            const dateStr = new Date(date).toLocaleDateString('ja-JP');
            const periodName = periodTimeMap[period as keyof typeof periodTimeMap]?.name || `${period}Èôê`;
            conflicts.push(`${dateStr} ${periodName} (${conflictingReservation?.title || '‰∫àÁ¥ÑÊ∏à„Åø'})`);
            console.log(`  ‚ùå Á´∂ÂêàËøΩÂä†: ${dateStr} ${periodName} vs ${conflictingReservation?.periodName}`);
          } else {
            console.log(`  ‚úÖ ÊôÇÈôê${period}„ÅØÂà©Áî®ÂèØËÉΩ`);
          }
        }
      }
      
      console.log(`üîç ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØÂÆå‰∫Ü: Á´∂ÂêàÊï∞=${conflicts.length}`);
      if (conflicts.length > 0) {
        console.log('‚ùå Ê§úÂá∫„Åï„Çå„ÅüÁ´∂Âêà:');
        conflicts.forEach((conflict, index) => console.log(`  ${index + 1}. ${conflict}`));
        return {
          hasConflict: true,
          message: `ÈÅ∏Êäû„Åó„ÅüÊôÇÈñìÂ∏Ø„ÅØÊó¢„Å´‰∫àÁ¥Ñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô`,
          details: conflicts
        };
      }
      
      console.log('‚úÖ ÈáçË§á„Å™„Åó„ÄÅ‰∫àÁ¥ÑÂèØËÉΩ');
      return { hasConflict: false, message: '', details: [] };
    } catch (error) {
      console.error('ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº:', error);
      return { hasConflict: false, message: '', details: [] };
    }
  };

  // ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØÂÆüË°åÔºàdebounce„ÅÇ„ÇäÔºâ
  const performConflictCheck = useCallback(async (
    datesToCheck: string[],
    periodsToCheck: string[],
    selectedRoom: string
  ) => {
    if (datesToCheck.length === 0 || periodsToCheck.length === 0 || !selectedRoom) {
      setConflictCheck({ hasConflict: false, conflictMessage: '', conflictDetails: [] });
      return;
    }

    const result = await checkForConflicts(datesToCheck, periodsToCheck, selectedRoom);
    setConflictCheck({
      hasConflict: result.hasConflict,
      conflictMessage: result.message,
      conflictDetails: result.details
    });
  }, []);

  return {
    conflictCheck,
    checkForConflicts,
    performConflictCheck,
    setConflictCheck
  };
};
